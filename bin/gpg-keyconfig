#!/bin/bash
##############################################################################
# keyconfig
# -----------
# Installs and configures gpg keys on machine from bitwarden
#
# Usage:
#       keyconfig
#
# :authors: Thijs De Meester, @demeesterdev
# :date: 2022-03-29
# :version: 0.0.1
##############################################################################

KEYITEMNAME=pgp
FIELD_FINGERPRINT_NAME=fingerprint
ATTACHMENT_SECRET_KEYS=secret-keys.gpg
ATTACHMENT_SECRET_SUBKEYS=secret-subkeys.gpg
ATTACHMENT_PUBLIC_KEYS=public-keys.gpg

check_bw_status() {
    if ! command -v bw &> /dev/null; then
        echo "command bw could not be found install the Bitwarden CLI before running gpg-keyconfig"
        exit 1
    fi

    bw_status=$(bw status | jq -r '.status')
    if [[ $bw_status == "unauthenticated" ]]; then
        echo "Set the BW_SESSION env variable. run 'bw login' to retrieve it";
        echo 'Or to set it in one go run `export BW_SESSION=$(bw login --raw)`';
        exit 1
    elif [[ $bw_status == 'locked' ]]; then 
        echo "Set the BW_SESSION env variable. run 'bw unlock' to retrieve it";
        echo 'Or to set it in one go run `export BW_SESSION=$(bw unlock --raw)`';
        exit 1;
    fi
}

install_keys() {
    itemid=$(bw get item $KEYITEMNAME | jq -r '.id')
    bw get attachment $ATTACHMENT_PUBLIC_KEYS --itemid $itemid --raw | gpg --import 
    bw get attachment $ATTACHMENT_SECRET_SUBKEYS --itemid $itemid --raw | gpg --import 
    fingerprint=$(bw get item $KEYITEMNAME | jq -r ".fields[] | select(.name == \"$FIELD_FINGERPRINT_NAME\") | .value")
    echo "${fingerprint}:6:" | gpg --import-ownertrust
}

install_key_full() {
    itemid=$(bw get item $KEYITEMNAME | jq -r '.id')
    bw get attachment $ATTACHMENT_PUBLIC_KEYS --itemid $itemid --raw | gpg --import 
    bw get attachment $ATTACHMENT_SECRET_KEYS --itemid $itemid --raw | gpg --import 
    fingerprint=$(bw get item $KEYITEMNAME | jq -r ".fields[] | select(.name == \"$FIELD_FINGERPRINT_NAME\") | .value") 
    echo "${fingerprint}:6:" | gpg --import-ownertrust
}

sync_key_to_cloud() {
    echo "sync pgp keys to bitwarden vault"

    scratch=$(mktemp -d -t tmp.XXXXXXXXXX)
    trap "rm -rf $scratch" EXIT
    itemid=$(bw get item $KEYITEMNAME | jq -r '.id')
    fingerprint=$(bw get item $KEYITEMNAME | jq -r ".fields[] | select(.name == \"$FIELD_FINGERPRINT_NAME\") | .value")
    echo " key $fingerprint: "
    echo " - public key"
    gpg --armor --export $fingerprint > "$scratch/$ATTACHMENT_PUBLIC_KEYS" && update_bw_attachment "$scratch/$ATTACHMENT_PUBLIC_KEYS" "$itemid" 

    echo " - secret primary key"
    gpg -a --export-secret-key $fingerprint > "$scratch/$ATTACHMENT_SECRET_KEYS" && update_bw_attachment "$scratch/$ATTACHMENT_SECRET_KEYS" "$itemid" 

    echo " - secret subkeys"
    gpg -a --export-secret-subkeys $fingerprint > "$scratch/$ATTACHMENT_SECRET_SUBKEYS" && update_bw_attachment "$scratch/$ATTACHMENT_SECRET_SUBKEYS" "$itemid" 

    echo "done"
    echo ""
}

#
# given a file uploads file as attachment
# if attachement with filename already exists renames old version to filename.YYYYMMDDHHMM.old
#
update_bw_attachment() {
    item_path=$1
    itemid=$2
    date=$(date '+%Y%m%d%H%M')
    if [ ! -f "$item_path" ]; then
        echo "file does not exist at path '$item_path'"
        exit
    fi
    newsum=$(cat $item_path | sha512sum)

    itemname=$(basename $item_path)
    echo "       [DEBUG] updating $itemname on $itemid"
    echo "       [DEBUG] sourcefile $item_path"
    result=$(ls -l $item_path)
    echo "       [DEBUG] ls -l $result"

    item=$(bw get item $itemid)    
    attachment_ids=($(echo $item | jq -r ".attachments[] | select(.fileName == \"$itemname\") | .id"))

    bw_scratch=$(mktemp -d -t tmp.XXXXXXXXXX)
    trap "rm -rf $bw_scratch" EXIT

    newcontent='true'
    for attachment_id in $attachment_ids    
    do
        filename="${itemname}.${date}.old"
        filepath="${bw_scratch}/${filename}"
        bw get attachment $attachment_id --itemid $itemid --raw > $filepath
        currentsum=$(cat $item_path | sha512sum)
        if [ "$currentsum" == "$newsum" ]; then
            echo "       [DEBUG] content already present (based on sha512)"
            newcontent='false'
        else
            echo "       [DEBUG] demoting attachment $attachment_id to $filename"
            bw create attachment --file $filepath --itemid $itemid 1>/dev/null && bw delete attachment $attachment_id --itemid $itemid 1>/dev/null
        fi
    done

    if [ $newcontent == 'true' ]; then
        echo "       [DEBUG] uploading new content"
        bw create attachment --file $item_path --itemid $itemid 1>/dev/null
    else
        echo "       [DEBUG] no new contentent skipping upload"
    fi
}

remove_secret_keys() {
    fingerprint=$(bw get item $KEYITEMNAME | jq -r ".fields[] | select(.name == \"$FIELD_FINGERPRINT_NAME\") | .value") 
    gpg --delete-secret-keys $fingerprint
}

usage() {
    echo -e "keyconfig\\n\\tThis script simplifies my key management\\n"
    echo "Usage:"
    echo "  install-keys                        - install public keys and private subkeys from bitwarden"
    echo "  install-key-full                    - install the full key private and public from bitwarden"
    echo "  uninstall-primary-key-secret        - uninstalls the primary key"
    echo "  sync                                - uploads all available keys to bitwarden"
}


main() {
    local cmd=$1

    if [[ -z "$cmd" ]]; then
        usage
        exit 1
    fi
    
    if [[ $cmd == "install-keys" ]]; then
        check_bw_status
        install_keys
    elif [[ $cmd == "install-key-full" ]]; then
        check_bw_status
        install_key_full
    elif [[ $cmd == "sync" ]]; then
        check_bw_status
        sync_key_to_cloud
    elif [[ $cmd == "uninstall-primary-key-secret" ]]; then
        check_bw_status
        sync_key_to_cloud
        remove_secret_keys
        install_keys
    else
        usage
    fi
}
main "$@"
